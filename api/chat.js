import admin from 'firebase-admin';
import { getAuth } from 'firebase-admin/auth';
import { getFirestore } from 'firebase-admin/firestore';

// Fun√ß√£o para processar a chave privada corretamente
function processPrivateKey(key) {
  if (!key) {
    throw new Error('FIREBASE_PRIVATE_KEY n√£o definida');
  }
  
  // Remove aspas no in√≠cio e fim se existirem
  let processedKey = key.trim();
  if (processedKey.startsWith('"') && processedKey.endsWith('"')) {
    processedKey = processedKey.slice(1, -1);
  }
  
  // Substitui \\n por quebras de linha reais
  processedKey = processedKey.replace(/\\n/g, '\n');
  
  // Verifica se tem o formato correto
  if (!processedKey.includes('-----BEGIN PRIVATE KEY-----')) {
    throw new Error('Chave privada n√£o tem formato PEM v√°lido');
  }
  
  return processedKey;
}

// Inicializa√ß√£o do Firebase com tratamento robusto
let firebaseInitialized = false;
let firebaseError = null;

async function initializeFirebase() {
  if (firebaseInitialized) return true;
  if (firebaseError) throw firebaseError;
  
  try {
    console.log('üîÑ Inicializando Firebase...');
    
    // Verificar vari√°veis obrigat√≥rias
    const requiredVars = ['FIREBASE_PROJECT_ID', 'FIREBASE_CLIENT_EMAIL', 'FIREBASE_PRIVATE_KEY'];
    for (const varName of requiredVars) {
      if (!process.env[varName]) {
        throw new Error(`Vari√°vel ${varName} n√£o definida`);
      }
    }
    
    // Processar chave privada
    const privateKey = processPrivateKey(process.env.FIREBASE_PRIVATE_KEY);
    
    // Configura√ß√£o do Firebase
    const firebaseConfig = {
      credential: admin.credential.cert({
        projectId: process.env.FIREBASE_PROJECT_ID,
        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
        privateKey: privateKey,
      }),
    };
    
    // Inicializar apenas se n√£o foi inicializado ainda
    if (!admin.apps.length) {
      admin.initializeApp(firebaseConfig);
    }
    
    // Testar se consegue acessar o Firestore
    const db = getFirestore();
    console.log('‚úÖ Firebase inicializado com sucesso');
    
    firebaseInitialized = true;
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro ao inicializar Firebase:', error.message);
    firebaseError = error;
    throw error;
  }
}

export default async function handler(req, res) {
  console.log('üöÄ Requisi√ß√£o recebida em /api/chat');

  // Headers CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ error: 'M√©todo n√£o permitido' });

  try {
    // Inicializar Firebase
    await initializeFirebase();
    const db = getFirestore();
    
    const { message, conversationHistory = [], idToken } = req.body;

    // Valida√ß√µes b√°sicas
    if (!idToken) {
      console.warn('‚ö†Ô∏è idToken ausente na requisi√ß√£o');
      return res.status(401).json({ error: 'Usu√°rio n√£o autenticado' });
    }

    if (!message || typeof message !== 'string' || message.trim().length === 0) {
      return res.status(400).json({ error: 'Mensagem inv√°lida ou vazia' });
    }

    if (!process.env.OPENAI_API_KEY) {
      console.error('‚ùå API Key da OpenAI n√£o configurada');
      return res.status(500).json({ error: 'API Key da OpenAI n√£o configurada' });
    }

    console.log('üîê Verificando token do Firebase...');
    let decoded;
    try {
      decoded = await getAuth().verifyIdToken(idToken);
    } catch (err) {
      console.error('‚ùå Erro ao verificar o idToken:', err.message);
      return res.status(401).json({ error: 'Token inv√°lido ou expirado' });
    }

    const uid = decoded.uid;
    const email = decoded.email;
    console.log(`‚úÖ Usu√°rio autenticado: ${email} (${uid})`);

    // Verifica√ß√£o do usu√°rio no Firebase
    const userRef = db.collection('usuarios').doc(uid);
    const hoje = new Date().toISOString().split('T')[0];

    let userDoc = await userRef.get();
    let userData;

    if (!userDoc.exists) {
      await userRef.set({ uid, email, plano: 'gratis', mensagensHoje: 0, ultimaData: hoje });
      userData = { plano: 'gratis', mensagensHoje: 0, ultimaData: hoje };
    } else {
      userData = userDoc.data();
    }

    if (userData.ultimaData !== hoje) {
      await userRef.update({ mensagensHoje: 0, ultimaData: hoje });
      userData.mensagensHoje = 0;
    }

    if (userData.plano === 'gratis' && userData.mensagensHoje >= 10) {
      return res.status(403).json({ error: 'Limite di√°rio de mensagens atingido' });
    }

    // Processar mensagem
    const messageContent = message.trim().substring(0, 2000);
    const mensagensFiltradas = conversationHistory
      .filter(msg => msg && msg.role && msg.content)
      .slice(-10);

    const requestBody = {
      model: 'gpt-3.5-turbo',
      temperature: 0.7,
      max_tokens: 1000,
      messages: [
        {
          role: 'system',
          content: `Voc√™ √© o Prod.AI üéµ - um mentor especialista em produ√ß√£o musical brasileira com foco em FUNK, mas dominando todos os estilos musicais.

PERSONALIDADE:
- Fale de forma descontra√≠da, como um produtor experiente conversando com um amigo
- Use g√≠rias do meio musical brasileiro (sample, beat, drop, grave, etc.)
- Seja motivador e sempre incentive a criatividade
- Demonstre paix√£o pela m√∫sica e produ√ß√£o
- Use emojis musicais ocasionalmente (üéµ, üî•, üéß, üé§, üéπ)

ESPECIALIDADES:
- FUNK (seu forte): MTG, 150bpm, batidas pesadas, graves marcantes, samples de voz
- Hip-Hop/Rap: boom bap, trap, drill, batidas 808
- Eletr√¥nica: house, techno, EDM, drops, builds
- Pop/Rock: arranjos, mixagem, masteriza√ß√£o
- Sertanejo: moderno e raiz
- Forr√≥, Pagode, Samba e outros ritmos brasileiros

COMO RESPONDER:
- Sempre cumprimente com energia ("E a√≠, parceiro!", "Fala, mano!", "Beleza, produtor!")
- D√™ dicas pr√°ticas e espec√≠ficas
- Cite DAWs populares (FL Studio, Logic, Ableton, Reaper)
- Mencione equipamentos quando relevante (monitores, interfaces, microfones)
- Pergunte sobre o setup/n√≠vel do usu√°rio para personalizar as dicas
- Ofere√ßa exemplos concretos e t√©cnicas espec√≠ficas
- Sugira exerc√≠cios pr√°ticos

EXEMPLO DE PRIMEIRA RESPOSTA:
"E a√≠, parceiro! üéµ Beleza? Aqui √© seu mano do Prod.AI! 

Caramba, que massa voc√™ querer entrar nessa vibe da produ√ß√£o! O funk t√° dominando mesmo, n√©? 

Me conta a√≠: voc√™ j√° manja de algum DAW? FL Studio, Logic, Ableton? Ou t√° come√ßando do zero mesmo? 

E qual sua vibe? Quer fazer uns funk pesado, uns trap, ou t√° mais pro pop/eletr√¥nico? 

Vamo que vamo fazer uns beats insanos! üî•"

DICAS T√âCNICAS QUE VOC√ä DOMINA:
- Equaliza√ß√£o e compress√£o
- Uso de samples e loops
- Programa√ß√£o de bateria
- Mixagem e masteriza√ß√£o
- Cria√ß√£o de melodias e harmonias
- Arranjos musicais
- T√©cnicas de grava√ß√£o
- Plugins e efeitos

Seja sempre assim: animado, t√©cnico quando necess√°rio, mas acess√≠vel para iniciantes!`
        },
        ...mensagensFiltradas,
        {
          role: 'user',
          content: messageContent,
        },
      ],
    };

    console.log("üì§ Enviando para OpenAI...");

    // Requisi√ß√£o para OpenAI com timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 25000);

    try {
      const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        },
        body: JSON.stringify(requestBody),
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (!openaiRes.ok) {
        const errorText = await openaiRes.text();
        console.error('‚ùå Erro da OpenAI:', openaiRes.status, errorText);
        
        if (openaiRes.status === 429) {
          return res.status(429).json({ error: 'Rate limit atingido. Tente novamente em alguns minutos.' });
        }
        
        return res.status(500).json({ error: 'Erro da API da OpenAI' });
      }

      const data = await openaiRes.json();
      
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        return res.status(500).json({ error: 'Resposta inv√°lida da OpenAI' });
      }

      const reply = data.choices[0].message.content.trim();

      // Atualizar contador
      if (userData.plano === 'gratis') {
        await userRef.update({
          mensagensHoje: admin.firestore.FieldValue.increment(1),
        });
      }

      console.log('‚úÖ Resposta enviada com sucesso');
      return res.status(200).json({ reply });

    } catch (fetchError) {
      clearTimeout(timeoutId);
      console.error('‚ùå Erro na requisi√ß√£o:', fetchError.message);
      
      if (fetchError.name === 'AbortError') {
        return res.status(504).json({ error: 'Timeout na requisi√ß√£o' });
      }
      
      return res.status(500).json({ error: 'Erro na conex√£o com OpenAI' });
    }

  } catch (error) {
    console.error('üí• ERRO NO SERVIDOR:', error.message);
    return res.status(500).json({ 
      error: 'Erro interno do servidor',
      details: error.message 
    });
  }
}
